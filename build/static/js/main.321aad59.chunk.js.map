{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","row","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.321aad59.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\nimport { v4 as uuid } from 'uuid';\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({crearCita}) =>{\n    \n    //Crear state de citas\n    const [cita, actualizarCita] = useState({\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    });\n    \n    const [error, actualizarError] = useState(false)\n\n    //Función que se ejecuta por cada input\n    const actualizarState = e =>{\n        actualizarCita({\n            ...cita,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    // Extraer los valores\n    const {mascota, propietario, fecha, hora, sintomas} = cita;\n\n    //Cuando el usuario presiona agregar cita\n    const submitCita = e =>{\n        e.preventDefault();\n        \n        // Validar\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\n\t\t\tactualizarError(true);\n\t\t\treturn; \n\t\t}\n\t\t\n\t\t// Eliminar mensaje previo\n\t\tactualizarError(false);\n\n        // Asignar un ID\n        cita.id = uuid();\n\n        // Crear la cita\n        crearCita(cita);\n\n        // Reiniciar el form\n        actualizarCita({\n\t\t\t\tmascota: '',\n\t\t\t\tpropietario: '',\n\t\t\t\tfecha: '',\n\t\t\t\thora: '',\n\t\t\t\tsintomas: ''\n\t\t\t})\n    }\n\n    return (\n        <Fragment>\n            <h2>Crear cita</h2>\n            \n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p>: null}\n            \n            <form\n                onSubmit={submitCita}\n            >\n                <label>Nombre Mascota</label>\n                <input \n                    type=\"text\" \n                    name=\"mascota\"\n                    className=\"u-full-width\" \n                    placeholder=\"Nombre Mascota\"\n                    onChange={actualizarState}\n                    value={mascota}\n                />\n\n                <label>Nombre Dueño</label>\n                <input \n                    type=\"text\" \n                    name=\"propietario\"\n                    className=\"u-full-width\" \n                    placeholder=\"Nombre Dueño de la mascota\"\n                    onChange={actualizarState}\n                    value={propietario}\n                />\n\n                <label>Fecha</label>\n                <input \n                    type=\"date\" \n                    name=\"fecha\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={fecha}\n                />\n\n                <label>Hora</label>\n                <input \n                    type=\"time\" \n                    name=\"hora\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={hora}\n                />\n\n                <label>Síntomas</label>\n                <textarea\n                    className=\"u-full-width\"\n                    name=\"sintomas\"\n                    onChange={actualizarState}\n                    value={sintomas}\n                ></textarea>\n\n                <button\n                    type=\"submit\"\n                    className=\"u-full-width button-primary\"\n                >Agregar cita</button>\n            </form>\n        </Fragment>\n    );\n}\n\nFormulario.propTypes = {\n\tcrearCita: PropTypes.func.isRequired\n\t}\n\nexport default Formulario;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst Cita = ({cita, eliminarCita}) => (\n\t<div className=\"cita\">\n\t\t<p>Mascota: <span>{cita.mascota}</span></p>\n\t\t<p>Dueño: <span>{cita.propietario}</span></p>\n\t\t<p>Fecha: <span>{cita.fecha}</span></p>\n\t\t<p>Hora: <span>{cita.hora}</span></p>\n\t\t<p>Síntomas: <span>{cita.sintomas}</span></p>\n\t\t\n\t\t<button\n\t\t\tclassName=\"button eliminar u-full-width\"\n\t\t\tonClick={()=>eliminarCita(cita.id)}\n\t\t>Eliminar &times;</button>\n\t</div>\n);\n\nCita.propTypes = {\n\tcita: PropTypes.object.isRequired,\n\teliminarCita: PropTypes.func.isRequired\n\t}\n\nexport default Cita;\n","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\t\n\t// Citas en local storage\n\tlet citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\tif(!citasIniciales){\n\t\tcitasIniciales=[];\n\t\t}\n\t\n\t// Arreglo de citas\n\tconst [citas, guardarCitas] = useState(citasIniciales);\n\t\n\t// Para realizar ciertas operaciones cuando el State cambia\n\tuseEffect( ()=>{\n\t\tlet citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\t\t\tif(citasIniciales){\n\t\t\t\tlocalStorage.setItem('citas', JSON.stringify(citas))\n\t\t\t}else{\n\t\t\t\tlocalStorage.setItem('citas', JSON.stringify([]));\n\t\t\t}\n\t\t}, [citas, citasIniciales]);\n\t\n\t// Función que tome las citas actuales y agregue la nueva\n\tconst crearCita = cita => {\n\t\tguardarCitas([\n\t\t\t...citas,\n\t\t\tcita\n\t\t]);\n\t\t}\n\t\t\n\t// Función que elimina una cita por su IDc\n\tconst eliminarCita = id =>{\n\t\tconst nuevasCitas = citas.filter(cita => cita.id !== id);\n\t\tguardarCitas(nuevasCitas);\n\t}\n\t\n\t//Mensaje condicional\n\tconst titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n\t\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className = \"Container\">\n        <div row=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n\t\t\t\tcrearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita =>(\n\t\t\t\t\t<Cita \n\t\t\t\t\t\tkey={cita.id}\n\t\t\t\t\t\tcita={cita}\n\t\t\t\t\t\teliminarCita={eliminarCita}\n\t\t\t\t\t/>\n\t\t\t\t))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}